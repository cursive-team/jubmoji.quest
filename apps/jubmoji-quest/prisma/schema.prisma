// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Card {
  id                      Int     @id @default(autoincrement())
  index                   Int     @unique // unique hardcoded index, separate from the autogenerated id
  name                    String
  description             String
  owner                   String  // the owner of a card is set by whoever currently holds the card
  type                    CardType?
  telegramChatInviteLink  String? // Link to telegram chat for collectors of this card
  twitterLink             String? // Link to twitter account for collectors of this card
  websiteLink             String? // Link to website for collectors of this card

  // Relationships
  prerequisitesFor      Quest[] @relation("PrerequisiteCards")
  collectsFor           Quest[] @relation("CollectionCards")
  powerPrerequisitesFor Power[] @relation("PowerPrerequisiteCards")
  powerCollectsFor      Power[] @relation("PowerCollectionCards")
}

model Quest {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  startTime       DateTime?
  endTime         DateTime?
  proofType       ProofType
  proofParams     Json    // params for the specific proof type
  imageLink       String?
  isOfficial      Boolean @default(false)
  isAlwaysVisible Boolean @default(false)
  createdAt       DateTime @default(now())

  // Relationships
  prerequisiteCards         Card[] @relation("PrerequisiteCards") // cards needed to see the quest
  collectionCards           Card[] @relation("CollectionCards")   // cards needed to complete the quest
  powers                    Power[] // powers granted upon completion
  teamLeaderboardNullifiers TeamLeaderboardNullifiers[]
}

model Power {
  id                     Int     @id @default(autoincrement())
  name                   String
  description            String
  startTime              DateTime?
  endTime                DateTime?
  sigNullifierRandomness String? // used if we want unique nullifiers for each power
  powerType              PowerType
  powerParams            Json    // params for the specific power type
  proofType              ProofType?
  proofParams            Json?    // params for the specific proof type
  createdAt              DateTime @default(now())

  // Relationships
  questId                   Int  
  quest                     Quest   @relation(fields: [questId], references: [id])
  prerequisiteCards         Card[]  @relation("PowerPrerequisiteCards") // cards needed to see the power
  collectionCards           Card[]  @relation("PowerCollectionCards")   // cards needed to complete the power
  qrCodes                   QRCode[]   
  sigNullifiers             PowerSigNullifier[]
}

model QRCode {
  id                Int      @id @default(autoincrement())
  uuid              String   @unique @default(uuid()) 
  serializedProof   String  
  createdAt         DateTime @default(now()) 

  // Relationships
  powerId   Int      
  power     Power    @relation(fields: [powerId], references: [id]) 
}

model PowerSigNullifier {
  id        Int    @id @default(autoincrement())
  nullifier String 
  createdAt DateTime @default(now())
  
  // Relationships
  powerId   Int   
  power     Power  @relation(fields: [powerId], references: [id])

  // Indexes
  @@index([powerId], name: "powerId_idx") 

  // Constraints
  @@unique([nullifier, powerId])
}

model TeamLeaderboardNullifiers {
  id              Int    @id @default(autoincrement())
  teamPubKeyIndex Int 
  sigNullifier    String
  createdAt       DateTime @default(now())

  // Relationships
  questId   Int
  quest     Quest  @relation(fields: [questId], references: [id])
}

model TeamLeaderboardProofLog {
  id                           Int    @id @default(autoincrement())
  isVerificationLog            Boolean // is this verifying rather than proving?
  includesTeamProof            Boolean // does proofTime include a team proof?
  membershipProofCount         Int  // number of membership proofs in the proofTime
  verifiedMembershipProofCount Int? // number of membership proofs verified
  proofTime                    Int  // time of proving or verification in milliseconds
  questId                      Int  
  teamPubKeyIndex              Int 
  createdAt                    DateTime @default(now())
}

enum CardType {
  PERSONAL
  GROUP
}

enum ProofType {
  IN_COLLECTION
  IN_COLLECTION_NONCE
  N_UNIQUE_IN_COLLECTION
  TEAM_LEADERBOARD
}

enum PowerType {
  QR_CODE
  TELEGRAM
  TWITTER
  REDIRECT
  POAP
}