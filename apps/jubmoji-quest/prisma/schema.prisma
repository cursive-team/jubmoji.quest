// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id          Int     @id @default(autoincrement())
  index       Int     @unique // unique hardcoded index, separate from the autogenerated id
  name        String
  description String
  owner       String  // the owner of a card is set by whoever currently holds the card

  // Relationships
  prerequisitesFor Quest[] @relation("PrerequisiteCards")
  collectsFor      Quest[] @relation("CollectionCards")
}

model Quest {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  tags        CardTag[]
  startTime   DateTime?
  endTime     DateTime?
  proofType   ProofType
  proofParams Json    // params for the specific proof type

  // Relationships
  prerequisiteCards Card[] @relation("PrerequisiteCards") // cards needed to see the quest
  collectionCards   Card[] @relation("CollectionCards")   // cards needed to complete the quest
  powers            Power[] // powers granted upon completion
}

model Power {
  id                     Int     @id @default(autoincrement())
  name                   String
  description            String
  startTime              DateTime?
  endTime                DateTime?
  sigNullifierRandomness String? // used if we want unique nullifiers for each power
  powerType              PowerType
  powerParams            Json    // params for the specific power type

  // Relationship
  quest       Quest   @relation(fields: [questId], references: [id])
  questId     Int     
}

enum CardTag {
  OFFICIAL
  ROLES
  APPLICATIONS
  COMMUNITY
  DEV_TOOLS
  INFRASTRUCTURE
  PRIVACY
  PERSONAL
}

enum ProofType {
  IN_COLLECTION
  IN_COLLECTION_NONCE
  N_UNIQUE_IN_COLLECTION
}

enum PowerType {
  QR_CODE
  TELEGRAM
  TWITTER
}